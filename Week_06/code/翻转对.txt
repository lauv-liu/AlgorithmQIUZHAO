
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        if(n < 2){
            return 0;
        }
        vector<int>temp;
        for(int i = 0;i<n;++i){
            temp.push_back(nums[i]);
        }
		vector<int>p(n,0);
        int res = reversePair(temp,0,n-1,p);
        return res;
    }
    int reversePair(vector<int>&temp,int left,int right,vector<int>&p){
        if(left == right){
            return 0;
        }
        int mid = left + (right - left)/2;
        int l = reversePair(temp,left,mid,p);
        int r = reversePair(temp,mid+1,right,p);

        int num = merge(temp,left,mid,right,p);
        return l + r + num;
    }
    int merge(vector<int>&temp,int left,int mid,int right,vector<int>&p){
        for(int i = left;i<= right;++i){
            p[i] = temp[i];
        }
        int p1 = left;
        int p2 = mid + 1;
        int sum = 0;
        for(int i = left,j = mid+1;i<=mid;++i){
            while(j<= right && temp[i]/2.0 > temp[j]){
                j++;
            }
            sum += j - (mid + 1);
        }
		for(int k = left;k <= right;++k){
			if(p1 == mid+1){
				temp[k] = p[p2];
				++p2;
			}
			else if(p2 == right+1){
				temp[k] = p[p1];
				++p1;
			}
			else if(p[p1] <= p[p2]){
				temp[k] = p[p1];
				++p1;
			}
			else{                
				temp[k] = p[p2];
				++p2;
			}
		}
        return sum;
    }
};