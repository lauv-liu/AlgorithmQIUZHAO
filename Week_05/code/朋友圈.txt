class Bset{
public:
    Bset(int k){
        for(int i = 0;i<k;++i){
            parent.push_back(i);
        }
        count = k;
    }
    int find(int i){
        if(parent[i] != i){
            parent[i] = find(parent[i]);
        }
        return parent[i];
    }
    void unin(int i,int j){
        int p1 = find(i);
        int p2 = find(j);
        if(p1 == p2){
            return;
        }
        parent[p1] = p2;
        count--;
        return;
    }
    int getcount(){
        return count;
    }
private:
    vector<int>parent;
    int count;
};
class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        int n = M.size();
        if(n <= 0){
            return 0;
        }
        Bset b(n);
        for(int i = 0;i<n;++i){
            for(int j = 0;j<n;++j){
                if(M[i][j] == 1){
                    b.unin(i,j);
                }
            }
        }
        return b.getcount();
    }
};