class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        if(board.size() == 0){
            return;
        }
        solve(board);
        return;
    }
    bool solve(vector<vector<char>>&board){
        for(int i = 0;i<(int)board.size();++i){
            for(int j = 0;j<(int)board[0].size();++j){
                if(board[i][j] == '.'){
                    for(char c = '1';c<='9';++c){
                        if(isValid(board,i,j,c)){
                            board[i][j] = c;
                            if(solve(board)){
                                return true;
                            }
                            else{
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(vector<vector<char>>&board,int col,int row,char c){
        for(int i = 0;i<9;++i){
            if(board[col][i] != '.' && board[col][i] == c) return false;
            if(board[i][row] != '.' && board[i][row] == c) return false;
            if(board[3*(col/3)+i/3][3*(row/3)+i%3] != '.' && board[3*(col/3)+i/3][3*(row/3)+i%3] == c) return false;
        }
        return true;
    }
};