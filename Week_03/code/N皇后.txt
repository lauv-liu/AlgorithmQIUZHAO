class Solution {
public:
    
    vector<vector<string>>res;
    vector<vector<string>> solveNQueens(int n) {
        vector<int>r;
        if(n<= 0){
            return res;
        }
        vector<int>temp;
        vector<bool>h(n,false);
        vector<bool>pie(2*n-1,false);
        vector<bool>cal(2*n-1,false);
        bfs(0,n,h,pie,cal,temp);
        return res;
    }
    void bfs(int index,int n,vector<bool>&h,vector<bool>&pie,vector<bool>&cal,vector<int>temp){
        if(index == n){
            res.push_back(GetCal(n,temp));
            return;
        }
        for(int i = 0;i<n;++i){
            if(h[i] || pie[i+index] || cal[index - i + n-1]){
                continue;
            }
            h[i] = true;
            pie[i+index] = true;
            cal[index-i+n-1] = true;
            temp.push_back(i);
            bfs(index+1,n,h,pie,cal,temp);
            h[i] = false;
            pie[i+index] = false;
            cal[index-i+n-1] = false;
            temp.pop_back();
        }
    }
    vector<string>GetCal(int n,vector<int>temp){
        vector<string>out(n,string(n,'.'));
        if(temp.size() < n){
            return out;
        }
        for(int i = 0;i<n;++i){
            out[i][temp[i]] = 'Q';
        }
        return out;
    }
};